from math import prod
from Crypto.Util.number import long_to_bytes

def extract_primes(hint):
    primes = []
    while hint:
        hint >>= 1
        if hint % 2 == 1:
            primes.append(hint & (2**128 - 1))
            hint >>= 128
    return primes

def decrypt(n, e, c, primes):
    assert n == prod(primes), "The product of primes does not match n!"
    phi = prod([p - 1 for p in primes])  # Calculate the totient Ï†(n)
    print(f"phi:{phi}")
    d = pow(e, -1, phi)  # Find the modular inverse of e
    m = pow(c, d, n)  # Decrypt ciphertext c
    return long_to_bytes(m)  # Convert decrypted integer to bytes

# Prompt the user for the hint, n, e, and c values
hint = 0b
n = 119493145368134756606524581488517378672235496744508597127639648421685629462649680337305664581985725401892086474314689141024498358715132868441978738105268336335778301627806695859205063825847290995872425532374614756539044160447358903375166525543471922868488499105664355206800751381027260462074705122647672994384365333260862845803962495145681040264675164695690862737006515315087470040757606517140071798300326022127659497206583492859643180260756285101547522674696613261207152550090000611298331939402585491230470733454735317291288404096144773097239721697692471487615973994925335486666529576878075473132154318910180009691
e = 65537
c = 78434014553061170529838401917720357645901208101352296269884472900978844319305951884764695717375322363272928093737865793113104432023794235229497701142692681415679549147532592802702053823324082733182072770779006523720442490771120987890027997070704393610765382574187921750560918055356164458340750383236011537901475045013520557031618820264221766743094536121925226791850895255993453048670745607742469934947653147879259892501050933253400391984499229656112961295969492487005786860006961292676090836472527246673699345029628224872195546099448661501561676622720260514226385260271583307493991971640825413235694692735476316469

# Extract primes from hint
primes = extract_primes(hint)
byts =  decrypt(n, e, c, primes)
# Decrypt the message
decrypted_message = decrypt(n, e, c, primes)

# Print the final decrypted message
print("Decrypted message:", decrypted_message.decode())

for prime in primes:
    print(f"Extracted prime: {prime}")

for test in byts:
    print(f"Extracted longbytes: {test}")
